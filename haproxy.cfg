#---------------------------------------------------------------------
# Example configuration that supports Openshift router sharding
#
# Multiple ingress node sets and their supported domains
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

# HTTP incoming - Parse the domain name and assign to the correct backend (ingress set)
frontend http-in
        bind *:80

        # Define hosts
        acl host_ocp410_default hdr(host) -m reg -i ^[^\.]+\.apps.ocp410.mclabs.us$
        acl host_ocp410_shard-1 hdr(host) -m reg -i ^[^\.]+\.shard-1.ocp410.mclabs.us$

        ## figure out which one to use
        use_backend ocp410_default_http if host_ocp410_default
        use_backend ocp410_shard-1_http if host_ocp410_shard-1
        default_backend ocp410_default_http


backend ocp410_default_http
        balance leastconn
        option httpclose
        option forwardfor
        cookie JSESSIONID prefix
        server worker1 10.100.59.131:80 cookie A check
        server worker2 10.100.59.160:80 cookie A check


backend ocp410_shard-1_http
        balance leastconn
        option httpclose
        option forwardfor
        cookie JSESSIONID prefix
        server worker1 10.100.59.148:80 cookie A check
        server worker2 10.100.59.187:80 cookie A check


# HTTP incoming - Parse the domain name and assign to the correct backend (ingress set)
frontend https-in
        bind *:443
        mode tcp
        option tcplog

        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }

        acl host_ocp410_default req_ssl_sni -m reg -i ^[^\.]+\.apps.ocp410.mclabs.us$
        acl host_ocp410_shard-1 req_ssl_sni -m reg -i ^[^\.]+\.shard-1.ocp410.mclabs.us$

        use_backend ocp410_default_https if host_ocp410_default
        use_backend ocp410_shart-1_https if host_ocp410_shard-1


backend ocp410_default_https
        balance leastconn
        mode tcp
        option tcplog
        server worker1 10.100.59.131:443 check
        server worker2 10.100.59.160:443 check


backend ocp410_shart-1_https
        balance leastconn
        mode tcp
        option tcplog
        server worker1 10.100.59.148:443 check
        server worker2 10.100.59.187:443 check

